use num_derive::FromPrimitive;
use num_traits::FromPrimitive;
use rand::Rng;
use std::io;
use std::io::Write;

#[derive(FromPrimitive, PartialEq)]
enum Action {
    Rock = 0,
    Paper,
    Scissors,
}

fn char_to_action(c: char) -> Action {
    match c {
        '–∫' => Action::Rock,
        '–Ω' => Action::Paper,
        '–±' => Action::Scissors,
        _ => panic!("–ù–µ–≤–µ—Ä–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω"),
    }
}

fn print_opponent_action(a: &Action) {
    match a {
        Action::Rock => println!("–ú–æ–π –ø—Ä–µ–¥–º–µ—Ç: –ö–∞–º–µ–Ω—å ü™®"),
        Action::Paper => println!("–ú–æ–π –ø—Ä–µ–¥–º–µ—Ç: –ë—É–º–∞–≥–∞ üìÑ"),
        Action::Scissors => println!("–ú–æ–π –ø—Ä–µ–¥–º–µ—Ç: –ù–æ–∂–Ω–∏—Ü—ã ‚úÇÔ∏è"),
    }
}

fn is_win(user_action: &Action, _machine_action: &Action) -> bool {
    *user_action == Action::Paper && *_machine_action == Action::Rock
        || *user_action == Action::Scissors && *_machine_action == Action::Paper
        || *user_action == Action::Rock && *_machine_action == Action::Scissors
}

fn main() {
    loop {
        print!("–í–∞—à –ø—Ä–µ–¥–º–µ—Ç (–ö)–∞–º–µ–Ω—å/(–ù)–æ–∂–Ω–∏—Ü—ã/(–ë)—É–º–∞–≥–∞: ");
        io::stdout().flush().unwrap();

        let mut action = String::new();

        io::stdin().read_line(&mut action).expect("–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞");

        let input: char = action.trim().parse().expect("–ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥");

        let user_action: Action = char_to_action(input);

        let _random_num: i32 = rand::thread_rng().gen_range(0..3);
        let _machine_action: Action = FromPrimitive::from_i32(_random_num).unwrap();

        print_opponent_action(&_machine_action);

        if is_win(&user_action, &_machine_action) {
            println!("–ò—Ç–æ–≥: –í—ã –ø–æ–±–µ–¥–∏–ª–∏! üéâ")
        } else if matches!(user_action, _machine_action) {
            println!("–ò—Ç–æ–≥: –ù–∏—á—å—è ü§∑")
        } else {
            println!("–ò—Ç–æ–≥: –í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏ üò¢")
        }
        println!("---")
    }
}
